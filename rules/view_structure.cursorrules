# View Structure Rules for Flutter App

## Directory Structure
```
lib/app/views/
├── {view_name}/
│   ├── {view_name}_view.dart          # Main view widget
│   └── models/
│       ├── {view_name}_view_model.dart # BLoC implementation
│       └── module/
│           ├── event.dart             # BLoC events
│           └── state.dart             # BLoC states
```

## File Naming Conventions

### 1. View Files
- **Main View**: `{view_name}_view.dart` (e.g., `splash_view.dart`, `home_view.dart`)
- **View Model**: `{view_name}_view_model.dart` (e.g., `splash_view_model.dart`)
- **Events**: `event.dart` (always in module folder)
- **States**: `state.dart` (always in module folder)

### 2. Class Naming
- **View Widget**: `{ViewName}View` (e.g., `SplashView`, `HomeView`)
- **BLoC**: `{ViewName}ViewModel` (e.g., `SplashViewModel`, `HomeViewModel`)
- **Events**: `{ViewName}Event` (e.g., `SplashEvent`, `HomeEvent`)
- **States**: `{ViewName}State` (e.g., `SplashState`, `HomeState`)

## Code Structure Rules

### 1. View File Structure (`{view_name}_view.dart`)
```dart
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:osmea_components/osmea_components.dart';
import 'package:pupilica_hackathon/core/helpers/logger/logger.dart';
import 'package:pupilica_hackathon/app/views/{view_name}/models/module/event.dart';
import 'package:pupilica_hackathon/app/views/{view_name}/models/module/state.dart';
import 'package:pupilica_hackathon/app/views/{view_name}/models/{view_name}_view_model.dart';

class {ViewName}View extends StatelessWidget {
  const {ViewName}View({super.key});

  @override
  Widget build(BuildContext context) {
    // System UI visibility management (if needed)
    SystemChrome.setEnabledSystemUIMode(SystemUiMode.immersiveSticky);
    
    return BlocProvider(
      create: (context) => {ViewName}ViewModel()..add({ViewName}InitialEvent(context)),
      child: BlocBuilder<{ViewName}ViewModel, {ViewName}State>(
        builder: (context, state) {
          return OsmeaComponents.scaffold(
            body: OsmeaComponents.center(
              child: OsmeaComponents.container(
                padding: context.paddingNormal,
                child: OsmeaComponents.column(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: [
                    OsmeaComponents.text(
                      '{ViewName}',
                      fontSize: 24,
                      fontWeight: FontWeight.bold,
                      color: OsmeaColors.nordicBlue,
                    ),
                    OsmeaComponents.sizedBox(height: context.height16),
                    OsmeaComponents.text(
                      'Welcome to {ViewName}',
                      fontSize: 16,
                      color: OsmeaColors.gray600,
                    ),
                  ],
                ),
              ),
            ),
          );
        },
      ),
    );
  }
}
```

### 2. View Model Structure (`{view_name}_view_model.dart`)
```dart
import 'dart:async';

import 'package:bloc/bloc.dart';
import 'package:osmea_components/osmea_components.dart';
import 'package:pupilica_hackathon/core/helpers/logger/logger.dart';
import 'package:pupilica_hackathon/app/views/{view_name}/models/module/event.dart';
import 'package:pupilica_hackathon/app/views/{view_name}/models/module/state.dart';

class {ViewName}ViewModel extends Bloc<{ViewName}Event, {ViewName}State> {
  {ViewName}ViewModel() : super({ViewName}InitialState()) {
    on<{ViewName}InitialEvent>(_on{ViewName}Initial);
  }

  Future<FutureOr<void>> _on{ViewName}Initial(
    {ViewName}InitialEvent event,
    Emitter<{ViewName}State> emit,
  ) async {
    Logger.info('{ViewName} initial event received', category: LogCategory.splash);
    await Future.delayed(event.context.durationMedium);
    Logger.success('{ViewName} initialization completed', category: LogCategory.splash);
  }
}
```

### 3. State Structure (`state.dart`)
```dart
abstract class {ViewName}State {}

class {ViewName}InitialState extends {ViewName}State {}
```

### 4. Event Structure (`event.dart`)
```dart
import 'package:flutter/material.dart';

abstract class {ViewName}Event {}

class {ViewName}InitialEvent extends {ViewName}Event {
  final BuildContext context;
  {ViewName}InitialEvent(this.context);
}
```

## Component Usage Rules

### 1. Required Imports
- Always import `osmea_components` for UI components
- Use `flutter_bloc` for state management
- Use `flutter/services.dart` for system UI management
- **Always import logger**: `package:pupilica_hackathon/core/helpers/logger/logger.dart`
- Import local models with full package paths

### 2. UI Component Guidelines
- **ALWAYS use OsmeaComponents** instead of standard Flutter widgets
- Use `OsmeaComponents.scaffold()` for main scaffold
- Use `OsmeaComponents.center()` for centering content
- Use `OsmeaComponents.container()` for containers
- Use `OsmeaComponents.column()` and `OsmeaComponents.row()` for layouts
- Use `OsmeaComponents.text()` for text elements
- Use `OsmeaComponents.button()` for buttons
- Use `OsmeaComponents.textField()` for text inputs
- Use `OsmeaComponents.cards()` for card components
- Use `OsmeaComponents.listView()` for lists
- Use `OsmeaComponents.loading()` for loading states
- Use `OsmeaComponents.toast()` for notifications
- Use `OsmeaColors` instead of standard `Colors`
- Use `context.durationMedium` for timing delays

### 3. State Management
- Use BLoC pattern with `BlocProvider` and `BlocBuilder`
- Pass `BuildContext` in events when needed for timing
- Use `Future.delayed()` with `context.durationMedium` for delays
- Keep state management simple and focused

### 4. System UI Management
- Use `SystemChrome.setEnabledSystemUIMode(SystemUiMode.immersiveSticky)` for fullscreen
- Apply system UI changes in the `build` method when needed

### 5. Import Structure
- Use full package paths for local imports
- Group imports: Flutter, packages, local files
- **Always include logger import** in the packages group
- Keep imports organized and clean

### 6. Logging Guidelines
- **NEVER use print() or debugPrint()** - always use Logger
- Use appropriate log categories (splash, navigation, api, etc.)
- Use appropriate log levels (debug, info, warning, error, success)
- Include structured data when relevant
- Log important events and state changes

### 7. OsmeaComponents Guidelines
- **NEVER use standard Flutter widgets** - always use OsmeaComponents
- Use `OsmeaComponents.text()` instead of `Text()`
- Use `OsmeaComponents.button()` instead of `ElevatedButton()`
- Use `OsmeaComponents.container()` instead of `Container()`
- Use `OsmeaComponents.column()` instead of `Column()`
- Use `OsmeaComponents.row()` instead of `Row()`
- Use `OsmeaColors` instead of `Colors`
- Use `OsmeaComponents.scaffold()` instead of `Scaffold()`
- Use `OsmeaComponents.cards()` instead of `Card()`
- Use `OsmeaComponents.listView()` instead of `ListView()`
- Use `OsmeaComponents.textField()` instead of `TextFormField()`
- Use `OsmeaComponents.loading()` instead of `CircularProgressIndicator()`

## Best Practices

1. **Simple Structure**: Keep the initial implementation simple and clean
2. **Consistent Naming**: Follow the naming conventions strictly
3. **Full Package Paths**: Use complete package paths for local imports
4. **System UI**: Handle system UI visibility when needed
5. **Timing**: Use `context.durationMedium` for consistent timing
6. **Debugging**: Use Logger with appropriate categories and levels for debugging
7. **OsmeaComponents**: Always use OsmeaComponents instead of standard Flutter widgets
8. **OsmeaColors**: Always use OsmeaColors instead of standard Colors
9. **Responsive Design**: Use sizer extensions for responsive layouts
10. **Extensibility**: Structure allows for easy expansion when needed

## Example Implementation
See `splash/` folder for a complete implementation example following these rules.
