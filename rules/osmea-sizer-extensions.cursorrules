# OSMEA Sizer Extensions - Cursor Rules

## üì¶ Package Overview
OSMEA Sizer Extensions provides comprehensive utilities for responsive design, spacing, animations, and UI layout in Flutter applications. This file contains 25+ extension categories with 800+ utility methods for consistent, responsive UI development.

## Import Statement
Always import the sizer extensions at the top of your files:
```dart
import 'package:osmea_components/osmea_components.dart';
```

## üéØ Development Guidelines

### üìÅ File Structure
```
packages/components/lib/src/utils/
‚îî‚îÄ‚îÄ sizer_extensions.dart    # Main sizer extensions file (858 lines)
```

### üé® Extension Categories Overview

#### 1. üì± Core Sizer Extensions (`SizerExtension`)
- **Screen Dimensions**: `allHeight`, `allWidth`, `mediaQuery`
- **Text Scaling**: `textScaler`, `textScaleFactor`
- **Dynamic Sizing**: `dynamicWidth()`, `dynamicHeight()`
- **Value Scaling**: `lowValue`, `normalValue`, `mediumValue`, `highValue`
- **Radius Values**: `radiusNone`, `radiusLow`, `radiusNormal`, `radiusMedium`, `radiusHigh`
- **Scale Values**: `scaleLowValue`, `scaleMediumValue`, `scaleHighValue`
- **Utility Values**: `nullValue`, `infinity`
- **Dividers**: `divider1`, `divider2`, `divider3`

#### 2. ‚≠ï Border Radius Extensions (`BorderRadiusExtension`)
- **Basic Radius**: `borderRadiusZero`, `borderRadiusNone`, `borderRadiusLow`
- **Standard Radius**: `borderRadiusNormal`, `borderRadiusMedium`, `borderRadiusHigh`
- **Special Radius**: `borderRadiusMinStandard` (7), `borderRadiusMaxStandard` (13)

#### 3. üî≤ Border Width Extensions (`BorderWidthExtension`)
- **Standard Width**: `borderWidth` (0.5)

#### 4. ‚è±Ô∏è Duration Extensions (`DurationExtension`)
- **Time Units**: `7.seconds`, `7.minutes`, `7.hours`, `7.days`, `7.weeks`
- **Micro Units**: `7.microseconds`, `7.milliseconds`
- **Zero Duration**: `7.zero`

#### 5. ‚è∞ Duration Values Extensions (`DurationValuesExtension`)
- **Basic Durations**: `durationZero`, `durationInstant`, `durationFast`, `durationQuick`
- **Standard Durations**: `durationNormal`, `durationMedium`, `durationSlow`, `durationVerySlow`
- **Long Durations**: `durationLong`, `durationVeryLong`
- **Animation Durations**: `animationShort`, `animationMedium`, `animationLong`, `animationSlow`
- **Delay Durations**: `delayShort`, `delayMedium`, `delayLong`
- **Timeout Durations**: `timeoutQuick`, `timeoutNormal`, `timeoutLong`, `timeoutVeryLong`

#### 6. üìê Alignment Extensions (`AlignmentExtension`)
- **Position Alignments**: `topLeft`, `topCenter`, `topRight`, `centerLeft`, `center`, `centerRight`, `bottomLeft`, `bottomCenter`, `bottomRight`
- **Main Axis**: `start`, `end`, `centerMain`, `spaceBetween`, `spaceAround`, `spaceEvenly`
- **Cross Axis**: `crossStart`, `crossEnd`, `crossCenter`, `crossStretch`, `crossBaseline`
- **Wrap Alignment**: `wrapStart`, `wrapEnd`, `wrapCenter`, `wrapSpaceBetween`, `wrapSpaceAround`, `wrapSpaceEvenly`
- **Axis Size**: `min`, `max`
- **Text Direction**: `ltr`, `rtl`
- **Axis Direction**: `horizontal`, `vertical`

#### 7. üì¶ Box Fit Extensions (`BoxFitExtension`)
- **Fit Types**: `fill`, `contain`, `cover`, `fitWidth`, `fitHeight`, `scaleDown`

#### 8. üìê Stack Fit Extensions (`StackFitExtension`)
- **Stack Fits**: `loose`, `expand`, `passthrough`

#### 9. üìè Spacing Extensions (`SpacingExtension`)
- **Dynamic Spacing**: `spacingZero`, `spacingLow`, `spacingNormal`, `spacingMedium`, `spacingHigh`
- **Fixed Spacing**: `spacing2`, `spacing4`, `spacing6`, `spacing8`, `spacing10`, `spacing12`, `spacing16`, `spacing20`, `spacing24`, `spacing32`, `spacing40`, `spacing48`, `spacing56`, `spacing64`

#### 10. üìê Width Extensions (`WidthExtension`)
- **Dynamic Width**: `widthZero`, `widthLow`, `widthNormal`, `widthMedium`, `widthHigh`
- **Fixed Width**: `width1` to `width384` (1, 2, 4, 8, 12, 16, 20, 24, 32, 40, 48, 56, 64, 80, 96, 112, 128, 144, 160, 176, 192, 208, 224, 240, 256, 288, 320, 384)

#### 11. üìè Height Extensions (`HeightExtension`)
- **Dynamic Height**: `heightZero`, `heightLow`, `heightNormal`, `heightMedium`, `heightHigh`
- **Fixed Height**: `height1` to `height640` (1, 2, 4, 8, 12, 16, 20, 24, 32, 40, 48, 56, 64, 80, 96, 112, 128, 144, 160, 176, 192, 208, 224, 240, 256, 288, 320, 384, 448, 512, 576, 640)

#### 12. üîÑ Wrap Cross Alignment Extensions (`WrapCrossAlignmentExtension`)
- **Wrap Cross**: `wrapCrossStart`, `wrapCrossEnd`, `wrapCrossCenter`

#### 13. üé™ Animation Status Extensions (`AnimationStatusExtension`)
- **Animation States**: `dismissed`, `forward`, `reverse`, `completed`

#### 14. üîß Clip Behavior Extensions (`ClipBehaviorExtension`)
- **Clip Types**: `clipNone`, `clipHardEdge`, `clipAntiAlias`, `clipAntiAliasWithSaveLayer`

#### 15. ‚ûñ Empty Widget Extensions (`EmptyWidget`)
- **Empty Boxes**: `emptySizedBox`, `emptySizedWidthBoxLow`, `emptySizedWidthBoxNormal`, `emptySizedWidthBoxHigh`
- **Height Boxes**: `emptySizedHeightBoxLow`, `emptySizedHeightBoxNormal`, `emptySizedHeightBoxMedium`, `emptySizedHeightBoxHigh`
- **Zero Boxes**: `emptySized`, `emptySizedWidthBoxZero`, `emptySizedHeightBoxZero`

#### 16. üü´ Divider Extensions (`DividerX`)
- **Custom Divider**: `divider({Color? color})` - Creates divider with 13% indent/endIndent

#### 17. üñºÔ∏è Image Asset Extensions (`ImageAssetX`)
- **Image Fit**: `getImageFitWidth({String path = ''})` - Image with 10% height and fitWidth

#### 18. üî≥ Icon Size Extensions (`IconSizeExtension`)
- **Icon Sizes**: `iconSizeZero`, `iconSizeExtraSmall` (14), `iconSizeSmall` (20), `iconSizeNormal` (24), `iconSizeMedium` (28), `iconSizeLarge` (32), `iconSizeHigh` (36), `iconSizeExtraHigh` (40)

#### 19. üß© Padding Extensions (`PaddingExtension`)
- **All Padding**: `paddingZero`, `paddingLow`, `paddingNormal`, `paddingMedium`, `paddingHigh`
- **Horizontal Padding**: `horizontalPaddingZero`, `horizontalPaddingLow`, `horizontalPaddingNormal`, `horizontalPaddingMedium`, `horizontalPaddingHigh`
- **Vertical Padding**: `verticalPaddingZero`, `verticalPaddingLow`, `verticalPaddingNormal`, `verticalPaddingMedium`, `verticalPaddingHigh`
- **Single Side Padding**: `onlyLeftPadding*`, `onlyRightPadding*`, `onlyTopPadding*`, `onlyBottomPadding*`
- **Custom Values**: `smallMobileHeight` (850)

#### 20. üìà Curves Extensions (`CurvesExtension`)
- **Basic Curves**: `linear`, `decelerate`, `ease`, `easeIn`, `easeOut`, `easeInOut`
- **Ease Variants**: `easeInSine`, `easeInQuad`, `easeInCubic`, `easeInQuart`, `easeInQuint`, `easeInExpo`, `easeInCirc`, `easeInBack`
- **Ease Out Variants**: `easeOutSine`, `easeOutQuad`, `easeOutCubic`, `easeOutQuart`, `easeOutQuint`, `easeOutExpo`, `easeOutCirc`, `easeOutBack`
- **Ease InOut Variants**: `easeInOutSine`, `easeInOutQuad`, `easeInOutCubic`, `easeInOutQuart`, `easeInOutQuint`, `easeInOutExpo`, `easeInOutCirc`, `easeInOutBack`
- **Special Curves**: `fastLinearToSlowEaseIn`, `easeInToLinear`, `linearToEaseOut`, `fastOutSlowIn`, `slowMiddle`
- **Bounce Curves**: `bounceIn`, `bounceOut`, `bounceInOut`
- **Elastic Curves**: `elasticIn`, `elasticOut`, `elasticInOut`

#### 21. üé® Blend Mode Extensions (`BlendModeExtension`)
- **Basic Modes**: `clear`, `src`, `dst`, `srcOver`, `dstOver`, `srcIn`, `dstIn`, `srcOut`, `dstOut`, `srcATop`, `dstATop`, `xor`, `plus`
- **Color Modes**: `modulate`, `screen`, `overlay`, `darken`, `lighten`, `colorDodge`, `colorBurn`, `hardLight`, `softLight`, `difference`, `exclusion`, `multiply`
- **HSL Modes**: `hue`, `saturation`, `color`, `luminosity`

#### 22. üé™ Flex Extensions (`FlexExtension`)
- **Flex Values**: `flex0` to `flex10` (0-10)

#### 23. üìä Opacity Extensions (`OpacityExtension`)
- **Opacity Values**: `opacity0` to `opacity100` (0.0-1.0 in 0.1 increments)

#### 24. üé® Alpha Extensions (`AlphaExtension`)
- **Alpha Values**: `alpha0` to `alpha100` (0.0-1.0 in 0.05 increments)
- **Named Alphas**: `alphaTransparent`, `alphaSubtle`, `alphaLight`, `alphaMedium`, `alphaStrong`, `alphaOpaque`
- **Overlay Alphas**: `alphaOverlayLight`, `alphaOverlayMedium`, `alphaOverlayDark`
- **State Alphas**: `alphaDisabled`, `alphaHint`

#### 25. üìç Offset Extensions (`OffsetExtension`)
- **Zero Offset**: `offsetZero`
- **Common Offsets**: `offset1` to `offset32` (1, 2, 4, 8, 12, 16, 20, 24, 32)
- **Horizontal Offsets**: `offsetHorizontal1` to `offsetHorizontal24`
- **Vertical Offsets**: `offsetVertical1` to `offsetVertical24`
- **Shadow Offsets**: `shadowOffsetLow`, `shadowOffsetNormal`, `shadowOffsetMedium`, `shadowOffsetHigh`, `shadowOffsetExtraHigh`
- **Negative Offsets**: `offsetNegative1` to `offsetNegative8`
- **Custom Builders**: `offsetCustom()`, `offsetHorizontalCustom()`, `offsetVerticalCustom()`

#### 26. ‚öôÔ∏è Widget State Extensions (`WidgetStateExtension`)
- **Widget States**: `pressed`, `hovered`, `focused`, `selected`, `disabled`, `dragged`, `error`

#### 27. üé≠ Floating Action Button Location Extensions (`FloatingActionButtonLocationExtension`)
- **Standard Locations**: `centerDocked`, `centerFloat`, `centerTop`, `endDocked`, `endFloat`, `endTop`, `startDocked`, `startFloat`, `startTop`
- **Mini Locations**: `miniCenterDocked`, `miniCenterFloat`, `miniCenterTop`, `miniEndDocked`, `miniEndFloat`, `miniEndTop`, `miniStartDocked`, `miniStartFloat`, `miniStartTop`

#### 28. üéöÔ∏è Slider Theme Extensions (`SliderThemeExtension`)
- **Value Indicators**: `onlyForDiscrete`, `onlyForContinuous`, `always`, `neverShow`

#### 29. üéØ Hit Test Behavior Extensions (`HitTestBehaviorExtension`)
- **Hit Test**: `deferToChild`, `opaque`, `translucent`

#### 30. üìè Margin Extensions (`MarginExtension`)
- **All Margins**: `marginZero`, `marginLow`, `marginNormal`, `marginMedium`, `marginHigh`
- **Horizontal Margins**: `horizontalMarginLow`, `horizontalMarginNormal`, `horizontalMarginMedium`, `horizontalMarginHigh`
- **Vertical Margins**: `verticalMarginLow`, `verticalMarginNormal`, `verticalMarginMedium`, `verticalMarginHigh`

#### 31. üì± Media Query Extensions (`MediaQueryExtension`)
- **Screen Info**: `statusBarHeight`, `bottomBarHeight`, `viewPadding`, `viewInsets`, `orientation`, `isPortrait`, `isLandscape`
- **Device Info**: `devicePixelRatio`, `accessibleNavigation`, `invertColors`, `disableAnimations`, `boldText`
- **Text Scaling**: `textScaleFactorClamped` (0.8-1.2 range)

#### 32. üìè Line Height Extensions (`LineHeightExtension`)
- **Line Heights**: `lineHeightTight` (1.0), `lineHeightSnug` (1.2), `lineHeightNormal` (1.4), `lineHeightRelaxed` (1.6), `lineHeightLoose` (1.8), `lineHeightExtraLoose` (2.0)

#### 33. üå´Ô∏è Blur Radius Extensions (`BlurRadiusExtension`)
- **No Blur**: `blurRadiusZero`
- **Light Blur**: `blurRadiusLight`, `blurRadiusSubtle`, `blurRadiusNormal`, `blurRadiusMedium`, `blurRadiusStrong`
- **Heavy Blur**: `blurRadiusHeavy`, `blurRadiusExtraHeavy`, `blurRadiusExtreme`, `blurRadiusMax`
- **Specific Values**: `blurRadius1` to `blurRadius64`
- **Shadow Blur**: `shadowBlurLow`, `shadowBlurNormal`, `shadowBlurMedium`, `shadowBlurHigh`, `shadowBlurExtraHigh`

#### 34. üìä Spread Radius Extensions (`SpreadRadiusExtension`)
- **No Spread**: `spreadRadiusZero`
- **Positive Spread**: `spreadRadiusSmall`, `spreadRadiusNormal`, `spreadRadiusMedium`, `spreadRadiusLarge`, `spreadRadiusExtraLarge`
- **Negative Spread**: `spreadRadiusNegativeSmall`, `spreadRadiusNegativeNormal`, `spreadRadiusNegativeMedium`, `spreadRadiusNegativeLarge`
- **Specific Values**: `spreadRadius1` to `spreadRadius16`
- **Shadow Spread**: `shadowSpreadLow`, `shadowSpreadNormal`, `shadowSpreadMedium`, `shadowSpreadHigh`, `shadowSpreadExtraHigh`
- **Inset Spread**: `insetSpreadSmall`, `insetSpreadMedium`, `insetSpreadLarge`

#### 35. üì¶ Box Shape Extensions (`BoxShapeExtension`)
- **Basic Shapes**: `rectangleShape`, `circleShape`
- **Named Shapes**: `shapeRectangle`, `shapeCircle`, `shapeRound`, `shapeSquare`
- **Context Shapes**: `containerShapeRectangle`, `containerShapeCircle`, `avatarShape`, `buttonShapeRectangle`, `buttonShapeCircle`, `iconShape`, `cardShape`, `badgeShape`, `chipShape`

### üîß Usage Rules

#### 1. üì± Responsive Design Patterns
```dart
// ‚úÖ Good - Use dynamic sizing for responsive layouts
Container(
  width: context.dynamicWidth(0.8),  // 80% of screen width
  height: context.dynamicHeight(0.3), // 30% of screen height
  padding: context.paddingNormal,
)

// ‚úÖ Good - Use screen dimensions for calculations
Widget buildResponsiveCard(BuildContext context) {
  final screenWidth = context.allWidth;
  final cardWidth = screenWidth > 600 
    ? context.dynamicWidth(0.3) 
    : context.dynamicWidth(0.9);
    
  return Container(
    width: cardWidth,
    height: context.dynamicHeight(0.4),
    padding: context.paddingMedium,
  );
}

// ‚ùå Bad - Hard-coded values
Container(
  width: 300,
  height: 200,
  padding: EdgeInsets.all(16),
)
```

#### 2. üìè Spacing Consistency Patterns
```dart
// ‚úÖ Good - Use consistent spacing values
Column(
  children: [
    Text('Title'),
    SizedBox(height: context.spacing16),
    Text('Subtitle'),
    SizedBox(height: context.spacing8),
    Text('Content'),
    SizedBox(height: context.spacing24),
  ],
)

// ‚úÖ Good - Use dynamic spacing for different screen sizes
Column(
  children: [
    Text('Title'),
    SizedBox(height: context.spacingNormal),
    Text('Subtitle'),
    SizedBox(height: context.spacingLow),
    Text('Content'),
    SizedBox(height: context.spacingHigh),
  ],
)

// ‚úÖ Good - Use fixed spacing for precise control
Row(
  children: [
    Icon(Icons.star),
    SizedBox(width: context.spacing4),
    Text('Rating'),
    SizedBox(width: context.spacing8),
    Text('4.5'),
  ],
)

// ‚ùå Bad - Inconsistent spacing
Column(
  children: [
    Text('Title'),
    SizedBox(height: 20),
    Text('Subtitle'),
    SizedBox(height: 5),
    Text('Content'),
  ],
)
```

#### 3. ‚≠ï Border Radius Standards
```dart
// ‚úÖ Good - Use standard radius values
Container(
  decoration: BoxDecoration(
    borderRadius: context.borderRadiusNormal, // 13px
    color: Colors.blue,
  ),
)

// ‚úÖ Good - Use different radius for different components
Card(
  shape: RoundedRectangleBorder(
    borderRadius: context.borderRadiusMedium, // 30px
  ),
  child: Container(
    decoration: BoxDecoration(
      borderRadius: context.borderRadiusLow, // 2px
      color: Colors.grey[100],
    ),
  ),
)

// ‚úÖ Good - Use special radius values
Container(
  decoration: BoxDecoration(
    borderRadius: context.borderRadiusMinStandard, // 7px
    color: Colors.green,
  ),
)

// ‚ùå Bad - Random radius values
Container(
  decoration: BoxDecoration(
    borderRadius: BorderRadius.circular(17),
    color: Colors.blue,
  ),
)
```

#### 4. ‚è±Ô∏è Animation Duration Patterns
```dart
// ‚úÖ Good - Use predefined animation durations
AnimatedContainer(
  duration: context.animationMedium, // 300ms
  curve: context.easeInOut,
  // ...
)

// ‚úÖ Good - Use different durations for different animations
AnimatedOpacity(
  opacity: isVisible ? 1.0 : 0.0,
  duration: context.animationShort, // 150ms
  child: Text('Fade in/out'),
)

AnimatedPositioned(
  duration: context.animationLong, // 500ms
  curve: context.easeOutBack,
  // ...
)

// ‚úÖ Good - Use duration extensions for custom durations
Timer(context.delayMedium, () {
  // Execute after 300ms delay
});

// ‚ùå Bad - Hard-coded durations
AnimatedContainer(
  duration: Duration(milliseconds: 400),
  curve: Curves.easeInOut,
  // ...
)
```

#### 5. üß© Padding Patterns
```dart
// ‚úÖ Good - Use semantic padding names
Padding(
  padding: context.paddingNormal, // All around padding
  child: Text('Content'),
)

// ‚úÖ Good - Use directional padding
Padding(
  padding: context.horizontalPaddingMedium, // Horizontal only
  child: Text('Content'),
)

Padding(
  padding: context.verticalPaddingLow, // Vertical only
  child: Text('Content'),
)

// ‚úÖ Good - Use single-side padding
Padding(
  padding: context.onlyLeftPaddingHigh, // Left side only
  child: Text('Content'),
)

// ‚úÖ Good - Combine different padding types
Container(
  padding: context.horizontalPaddingNormal + context.verticalPaddingLow,
  child: Text('Content'),
)

// ‚ùå Bad - Inconsistent padding
Padding(
  padding: EdgeInsets.all(15),
  child: Text('Content'),
)
```

#### 6. üìê Alignment Patterns
```dart
// ‚úÖ Good - Use alignment extensions
Column(
  mainAxisAlignment: context.spaceBetween,
  crossAxisAlignment: context.crossStart,
  children: [
    Text('Top'),
    Text('Bottom'),
  ],
)

// ‚úÖ Good - Use position alignments
Align(
  alignment: context.topRight,
  child: Icon(Icons.close),
)

// ‚úÖ Good - Use wrap alignments
Wrap(
  alignment: context.wrapCenter,
  crossAxisAlignment: context.wrapCrossStart,
  children: [
    Chip(label: Text('Tag 1')),
    Chip(label: Text('Tag 2')),
  ],
)

// ‚ùå Bad - Hard-coded alignments
Column(
  mainAxisAlignment: MainAxisAlignment.spaceBetween,
  crossAxisAlignment: CrossAxisAlignment.start,
  children: [
    Text('Top'),
    Text('Bottom'),
  ],
)
```

#### 7. üé® Visual Effect Patterns
```dart
// ‚úÖ Good - Use blur radius extensions
Container(
  decoration: BoxDecoration(
    boxShadow: [
      BoxShadow(
        blurRadius: context.shadowBlurNormal, // 4.0
        spreadRadius: context.shadowSpreadNormal, // 1.0
        offset: context.shadowOffsetNormal, // (0, 2)
        color: Colors.black.withOpacity(context.alpha20),
      ),
    ],
  ),
)

// ‚úÖ Good - Use opacity extensions
Container(
  color: Colors.blue.withOpacity(context.alpha50),
  child: Text('Semi-transparent'),
)

// ‚úÖ Good - Use blend mode extensions
BlendMode(
  blendMode: context.screen,
  child: Image.asset('overlay.png'),
)

// ‚ùå Bad - Hard-coded visual values
Container(
  decoration: BoxDecoration(
    boxShadow: [
      BoxShadow(
        blurRadius: 4.0,
        spreadRadius: 1.0,
        offset: Offset(0, 2),
        color: Colors.black.withOpacity(0.2),
      ),
    ],
  ),
)
```

#### 8. üì± Media Query Patterns
```dart
// ‚úÖ Good - Use media query extensions
Widget buildAdaptiveLayout(BuildContext context) {
  if (context.isPortrait) {
    return Column(
      children: [
        Container(height: context.height200),
        Container(height: context.height300),
      ],
    );
  } else {
    return Row(
      children: [
        Container(width: context.width300),
        Container(width: context.width400),
      ],
    );
  }
}

// ‚úÖ Good - Use device-specific values
Container(
  padding: EdgeInsets.only(
    top: context.statusBarHeight + context.spacing16,
    bottom: context.bottomBarHeight + context.spacing8,
  ),
  child: Text('Content'),
)

// ‚úÖ Good - Use text scaling
Text(
  'Responsive Text',
  style: TextStyle(
    fontSize: 16 * context.textScaleFactorClamped,
  ),
)

// ‚ùå Bad - Hard-coded media query values
Widget buildLayout(BuildContext context) {
  final screenWidth = MediaQuery.of(context).size.width;
  if (screenWidth < 600) {
    // Mobile layout
  } else {
    // Desktop layout
  }
}
```

#### 9. üé™ Animation Pattern Examples
```dart
// ‚úÖ Good - Use curve extensions for smooth animations
AnimatedContainer(
  duration: context.animationMedium,
  curve: context.easeOutBack,
  child: Text('Bouncy animation'),
)

// ‚úÖ Good - Use different curves for different effects
AnimatedOpacity(
  duration: context.animationShort,
  curve: context.easeInOut,
  opacity: isVisible ? 1.0 : 0.0,
  child: Text('Fade'),
)

AnimatedPositioned(
  duration: context.animationLong,
  curve: context.bounceOut,
  // ...
)

// ‚úÖ Good - Use elastic curves for playful animations
AnimatedScale(
  duration: context.animationMedium,
  curve: context.elasticInOut,
  scale: isPressed ? 0.95 : 1.0,
  child: ElevatedButton(
    onPressed: () {},
    child: Text('Elastic Button'),
  ),
)

// ‚ùå Bad - Hard-coded curves
AnimatedContainer(
  duration: Duration(milliseconds: 300),
  curve: Curves.easeInOut,
  // ...
)
```

#### 10. üéØ Widget State Patterns
```dart
// ‚úÖ Good - Use widget state extensions
ElevatedButton(
  onPressed: isEnabled ? () {} : null,
  style: ElevatedButton.styleFrom(
    backgroundColor: isEnabled ? Colors.blue : Colors.grey,
  ).copyWith(
    overlayColor: WidgetStateProperty.resolveWith((states) {
      if (states.contains(context.pressed)) {
        return Colors.blue.withOpacity(context.alpha20);
      }
      if (states.contains(context.hovered)) {
        return Colors.blue.withOpacity(context.alpha10);
      }
      return null;
    }),
  ),
  child: Text('Button'),
)

// ‚úÖ Good - Use state-based styling
Container(
  decoration: BoxDecoration(
    color: isSelected ? Colors.blue : Colors.grey,
    border: Border.all(
      color: isFocused ? Colors.blue : Colors.grey,
      width: context.borderWidth,
    ),
  ),
  child: Text('Stateful Container'),
)

// ‚ùå Bad - Hard-coded states
ElevatedButton(
  style: ElevatedButton.styleFrom(
    backgroundColor: isEnabled ? Colors.blue : Colors.grey,
  ),
  // ...
)
```

### üì± Mobile-First Approach

#### 1. Responsive Breakpoints
```dart
// ‚úÖ Good - Use dynamic sizing for different screen sizes
Widget buildResponsiveLayout(BuildContext context) {
  if (context.allWidth < 600) {
    // Mobile layout
    return Column(
      children: [
        Container(
          width: context.dynamicWidth(0.9),
          padding: context.paddingNormal,
        ),
      ],
    );
  } else if (context.allWidth < 900) {
    // Tablet layout
    return Row(
      children: [
        Container(
          width: context.dynamicWidth(0.4),
          padding: context.paddingMedium,
        ),
        Container(
          width: context.dynamicWidth(0.6),
          padding: context.paddingMedium,
        ),
      ],
    );
  } else {
    // Desktop layout
    return Row(
      children: [
        Container(
          width: context.dynamicWidth(0.3),
          padding: context.paddingHigh,
        ),
        Container(
          width: context.dynamicWidth(0.7),
          padding: context.paddingHigh,
        ),
      ],
    );
  }
}

// ‚úÖ Good - Use orientation-based layouts
Widget buildOrientationLayout(BuildContext context) {
  if (context.isPortrait) {
    return Column(
      children: [
        Container(height: context.height200),
        Container(height: context.height300),
      ],
    );
  } else {
    return Row(
      children: [
        Container(width: context.width300),
        Container(width: context.width400),
      ],
    );
  }
}
```

#### 2. Touch Target Sizing
```dart
// ‚úÖ Good - Adequate touch targets (minimum 48dp)
GestureDetector(
  onTap: () {},
  child: Container(
    width: context.width48,  // 48dp minimum
    height: context.height48,
    padding: context.paddingLow,
  ),
)

// ‚úÖ Good - Larger touch targets for important actions
ElevatedButton(
  onPressed: () {},
  style: ElevatedButton.styleFrom(
    minimumSize: Size(context.width64, context.height48),
    padding: context.horizontalPaddingMedium + context.verticalPaddingLow,
  ),
  child: Text('Primary Action'),
)

// ‚úÖ Good - Use icon size extensions for touch targets
IconButton(
  onPressed: () {},
  iconSize: context.iconSizeLarge, // 32dp
  icon: Icon(Icons.menu),
)
```

#### 3. Responsive Typography
```dart
// ‚úÖ Good - Use text scaling for accessibility
Text(
  'Responsive Text',
  style: TextStyle(
    fontSize: 16 * context.textScaleFactorClamped,
    height: context.lineHeightNormal,
  ),
)

// ‚úÖ Good - Use clamped text scaling
Text(
  'Accessible Text',
  style: TextStyle(
    fontSize: 18 * context.textScaleFactorClamped, // 0.8-1.2 range
  ),
)
```

#### 4. Adaptive Spacing
```dart
// ‚úÖ Good - Use adaptive spacing based on screen size
Widget buildAdaptiveCard(BuildContext context) {
  final isTablet = context.allWidth > 768;
  
  return Card(
    margin: isTablet ? context.marginHigh : context.marginNormal,
    child: Padding(
      padding: isTablet ? context.paddingHigh : context.paddingMedium,
      child: Column(
        children: [
          Text('Title'),
          SizedBox(height: isTablet ? context.spacing24 : context.spacing16),
          Text('Content'),
        ],
      ),
    ),
  );
}
```

### üé® Advanced Usage Patterns

#### 1. Custom Extension Creation
```dart
// ‚úÖ Good - Create custom extensions for specific use cases
extension CustomSizerExtension on BuildContext {
  // Custom spacing for specific components
  double get cardSpacing => spacing16;
  double get listItemSpacing => spacing8;
  double get sectionSpacing => spacing24;
  
  // Custom dimensions for specific layouts
  double get sidebarWidth => dynamicWidth(0.25);
  double get contentWidth => dynamicWidth(0.75);
  double get headerHeight => height80;
  
  // Custom breakpoints
  bool get isMobile => allWidth < 600;
  bool get isTablet => allWidth >= 600 && allWidth < 900;
  bool get isDesktop => allWidth >= 900;
  
  // Custom padding combinations
  EdgeInsets get cardPadding => horizontalPaddingMedium + verticalPaddingNormal;
  EdgeInsets get listPadding => horizontalPaddingLow + verticalPaddingLow;
  EdgeInsets get sectionPadding => horizontalPaddingHigh + verticalPaddingHigh;
}
```

#### 2. Conditional Sizing Patterns
```dart
// ‚úÖ Good - Use conditional sizing based on screen size
Widget buildAdaptiveGrid(BuildContext context) {
  final isTablet = context.allWidth > 768;
  final crossAxisCount = isTablet ? 3 : 2;
  final childAspectRatio = isTablet ? 1.2 : 1.0;
  
  return GridView.count(
    crossAxisCount: crossAxisCount,
    childAspectRatio: childAspectRatio,
    padding: isTablet ? context.paddingHigh : context.paddingMedium,
    crossAxisSpacing: context.spacing16,
    mainAxisSpacing: context.spacing16,
    children: _buildGridItems(context),
  );
}

// ‚úÖ Good - Use device-specific values
Widget buildDeviceSpecificLayout(BuildContext context) {
  final isSmallScreen = context.allHeight < context.smallMobileHeight;
  
  return Container(
    padding: isSmallScreen ? context.paddingLow : context.paddingNormal,
    child: Column(
      children: [
        Container(
          height: isSmallScreen ? context.height100 : context.height150,
          child: Text('Adaptive Content'),
        ),
      ],
    ),
  );
}
```

#### 3. Animation Sequence Patterns
```dart
// ‚úÖ Good - Use duration extensions for complex animations
class StaggeredAnimation extends StatefulWidget {
  @override
  _StaggeredAnimationState createState() => _StaggeredAnimationState();
}

class _StaggeredAnimationState extends State<StaggeredAnimation>
    with TickerProviderStateMixin {
  late List<AnimationController> _controllers;

  @override
  void initState() {
    super.initState();
    _controllers = List.generate(
      3,
      (index) => AnimationController(
        duration: context.durationNormal, // 300ms
        vsync: this,
      ),
    );
    
    // Stagger the animations
    for (int i = 0; i < _controllers.length; i++) {
      Future.delayed(
        Duration(milliseconds: i * 100),
        () => _controllers[i].forward(),
      );
    }
  }

  @override
  Widget build(BuildContext context) {
    return Column(
      children: List.generate(3, (index) {
        return AnimatedBuilder(
          animation: _controllers[index],
          builder: (context, child) {
            return Transform.translate(
              offset: Offset(0, 50 * (1 - _controllers[index].value)),
              child: Opacity(
                opacity: _controllers[index].value,
                child: child,
              ),
            );
          },
          child: Container(
            height: context.height100,
            margin: context.marginLow,
            child: Text('Item ${index + 1}'),
          ),
        );
      }),
    );
  }
}
```

#### 4. Shadow and Visual Effects
```dart
// ‚úÖ Good - Use shadow extensions for consistent elevation
Container(
  decoration: BoxDecoration(
    color: Colors.white,
    borderRadius: context.borderRadiusNormal,
    boxShadow: [
      BoxShadow(
        color: Colors.black.withOpacity(context.alpha10),
        blurRadius: context.shadowBlurNormal,
        spreadRadius: context.shadowSpreadNormal,
        offset: context.shadowOffsetNormal,
      ),
    ],
  ),
  child: Text('Elevated Card'),
)

// ‚úÖ Good - Use different shadow levels
Widget buildCardWithElevation(BuildContext context, int elevation) {
  final shadowBlur = elevation == 1 ? context.shadowBlurLow :
                    elevation == 2 ? context.shadowBlurNormal :
                    context.shadowBlurHigh;
  
  final shadowSpread = elevation == 1 ? context.shadowSpreadLow :
                      elevation == 2 ? context.shadowSpreadNormal :
                      context.shadowSpreadHigh;
  
  return Container(
    decoration: BoxDecoration(
      color: Colors.white,
      borderRadius: context.borderRadiusNormal,
      boxShadow: [
        BoxShadow(
          color: Colors.black.withOpacity(context.alpha20),
          blurRadius: shadowBlur,
          spreadRadius: shadowSpread,
          offset: context.shadowOffsetNormal,
        ),
      ],
    ),
    child: Text('Card with elevation $elevation'),
  );
}
```

#### 5. Form Layout Patterns
```dart
// ‚úÖ Good - Use consistent form spacing
Widget buildForm(BuildContext context) {
  return Column(
    crossAxisAlignment: context.crossStart,
    children: [
      Text('Form Title', style: Theme.of(context).textTheme.headlineSmall),
      SizedBox(height: context.spacing16),
      
      // Form fields with consistent spacing
      TextFormField(
        decoration: InputDecoration(
          labelText: 'Field 1',
          border: OutlineInputBorder(
            borderRadius: context.borderRadiusNormal,
          ),
        ),
      ),
      SizedBox(height: context.spacing12),
      
      TextFormField(
        decoration: InputDecoration(
          labelText: 'Field 2',
          border: OutlineInputBorder(
            borderRadius: context.borderRadiusNormal,
          ),
        ),
      ),
      SizedBox(height: context.spacing24),
      
      // Action buttons
      Row(
        mainAxisAlignment: context.spaceBetween,
        children: [
          ElevatedButton(
            onPressed: () {},
            child: Text('Cancel'),
          ),
          ElevatedButton(
            onPressed: () {},
            child: Text('Submit'),
          ),
        ],
      ),
    ],
  );
}
```

#### 6. List and Grid Patterns
```dart
// ‚úÖ Good - Use consistent list spacing
Widget buildList(BuildContext context) {
  return ListView.builder(
    padding: context.paddingMedium,
    itemCount: 10,
    itemBuilder: (context, index) {
      return Container(
        margin: context.marginLow,
        padding: context.paddingNormal,
        decoration: BoxDecoration(
          color: Colors.grey[100],
          borderRadius: context.borderRadiusLow,
        ),
        child: Text('List Item $index'),
      );
    },
  );
}

// ‚úÖ Good - Use responsive grid
Widget buildResponsiveGrid(BuildContext context) {
  final crossAxisCount = context.isTablet ? 3 : 2;
  
  return GridView.builder(
    padding: context.paddingMedium,
    gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(
      crossAxisCount: crossAxisCount,
      crossAxisSpacing: context.spacing16,
      mainAxisSpacing: context.spacing16,
      childAspectRatio: 1.0,
    ),
    itemCount: 6,
    itemBuilder: (context, index) {
      return Container(
        decoration: BoxDecoration(
          color: Colors.blue[100],
          borderRadius: context.borderRadiusNormal,
        ),
        child: Center(
          child: Text('Grid Item $index'),
        ),
      );
    },
  );
}
```

### üé® Theme Integration

#### 1. Consistent Spacing
```dart
// ‚úÖ Good - Use spacing extensions throughout the app
class ProductCard extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Card(
      margin: context.marginNormal,
      child: Padding(
        padding: context.paddingMedium,
        child: Column(
          crossAxisAlignment: context.crossStart,
          children: [
            Text('Product Name'),
            SizedBox(height: context.spacing8),
            Text('Product Description'),
            SizedBox(height: context.spacing16),
            // ...
          ],
        ),
      ),
    );
  }
}

// ‚úÖ Good - Use consistent spacing in lists
class ProductList extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return ListView.builder(
      padding: context.paddingMedium,
      itemCount: 10,
      itemBuilder: (context, index) {
        return Container(
          margin: context.marginLow,
          padding: context.paddingNormal,
          decoration: BoxDecoration(
            color: Colors.white,
            borderRadius: context.borderRadiusNormal,
            boxShadow: [
              BoxShadow(
                blurRadius: context.shadowBlurLow,
                spreadRadius: context.shadowSpreadLow,
                offset: context.shadowOffsetLow,
                color: Colors.black.withOpacity(context.alpha10),
              ),
            ],
          ),
          child: Text('Product $index'),
        );
      },
    );
  }
}
```

#### 2. Animation Consistency
```dart
// ‚úÖ Good - Use consistent animation patterns
class AnimatedButton extends StatefulWidget {
  @override
  _AnimatedButtonState createState() => _AnimatedButtonState();
}

class _AnimatedButtonState extends State<AnimatedButton>
    with SingleTickerProviderStateMixin {
  late AnimationController _controller;

  @override
  void initState() {
    super.initState();
    _controller = AnimationController(
      duration: context.animationMedium, // 300ms
      vsync: this,
    );
  }

  @override
  Widget build(BuildContext context) {
    return AnimatedBuilder(
      animation: _controller,
      builder: (context, child) {
        return Transform.scale(
          scale: 1.0 + (_controller.value * 0.1),
          child: child,
        );
      },
      child: ElevatedButton(
        onPressed: () {
          _controller.forward().then((_) {
            _controller.reverse();
          });
        },
        child: Text('Animated Button'),
      ),
    );
  }
}

// ‚úÖ Good - Use consistent animation curves
class FadeInWidget extends StatefulWidget {
  final Widget child;
  
  const FadeInWidget({required this.child});
  
  @override
  _FadeInWidgetState createState() => _FadeInWidgetState();
}

class _FadeInWidgetState extends State<FadeInWidget>
    with SingleTickerProviderStateMixin {
  late AnimationController _controller;
  late Animation<double> _animation;

  @override
  void initState() {
    super.initState();
    _controller = AnimationController(
      duration: context.animationMedium,
      vsync: this,
    );
    _animation = CurvedAnimation(
      parent: _controller,
      curve: context.easeInOut,
    );
    _controller.forward();
  }

  @override
  Widget build(BuildContext context) {
    return FadeTransition(
      opacity: _animation,
      child: widget.child,
    );
  }
}
```

#### 3. Responsive Design Integration
```dart
// ‚úÖ Good - Use responsive design throughout
class ResponsiveLayout extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: SafeArea(
        child: Padding(
          padding: context.paddingMedium,
          child: Column(
            children: [
              // Header with responsive height
              Container(
                height: context.dynamicHeight(0.1),
                child: Text('Header'),
              ),
              SizedBox(height: context.spacing16),
              
              // Content with responsive width
              Expanded(
                child: Container(
                  width: context.dynamicWidth(0.9),
                  padding: context.paddingNormal,
                  decoration: BoxDecoration(
                    color: Colors.grey[100],
                    borderRadius: context.borderRadiusNormal,
                  ),
                  child: Text('Content'),
                ),
              ),
              
              SizedBox(height: context.spacing16),
              
              // Footer with responsive padding
              Container(
                padding: context.horizontalPaddingMedium + context.verticalPaddingLow,
                child: Text('Footer'),
              ),
            ],
          ),
        ),
      ),
    );
  }
}
```

### üöÄ Best Practices

#### 1. Performance Optimization
```dart
// ‚úÖ Good - Use const constructors with extensions
const SizedBox(
  width: 16,  // Use direct values for const
  height: 16,
)

// For dynamic values, use extensions
SizedBox(
  width: context.width16,
  height: context.height16,
)

// ‚úÖ Good - Use extensions for non-const values
Container(
  width: context.dynamicWidth(0.8),
  height: context.dynamicHeight(0.3),
  padding: context.paddingNormal,
  child: Text('Content'),
)
```

#### 2. Code Readability
```dart
// ‚úÖ Good - Clear and readable
Container(
  margin: context.marginNormal,
  padding: context.paddingMedium,
  decoration: BoxDecoration(
    borderRadius: context.borderRadiusNormal,
    color: Colors.blue,
    boxShadow: [
      BoxShadow(
        blurRadius: context.shadowBlurNormal,
        spreadRadius: context.shadowSpreadNormal,
        offset: context.shadowOffsetNormal,
        color: Colors.black.withOpacity(context.alpha20),
      ),
    ],
  ),
  child: Text('Content'),
)

// ‚ùå Bad - Hard to read
Container(
  margin: EdgeInsets.all(16),
  padding: EdgeInsets.all(24),
  decoration: BoxDecoration(
    borderRadius: BorderRadius.circular(13),
    color: Colors.blue,
    boxShadow: [
      BoxShadow(
        blurRadius: 4.0,
        spreadRadius: 1.0,
        offset: Offset(0, 2),
        color: Colors.black.withOpacity(0.2),
      ),
    ],
  ),
  child: Text('Content'),
)
```

#### 3. Consistency Across Components
```dart
// ‚úÖ Good - Use the same spacing pattern across all components
class ConsistentCard extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Card(
      margin: context.marginNormal,
      child: Padding(
        padding: context.paddingMedium,
        child: Column(
          crossAxisAlignment: context.crossStart,
          children: [
            Text('Title', style: Theme.of(context).textTheme.headlineSmall),
            SizedBox(height: context.spacing8),
            Text('Subtitle', style: Theme.of(context).textTheme.bodyMedium),
            SizedBox(height: context.spacing16),
            // Content
          ],
        ),
      ),
    );
  }
}

// ‚úÖ Good - Use consistent button styling
class ConsistentButton extends StatelessWidget {
  final String text;
  final VoidCallback? onPressed;
  
  const ConsistentButton({
    required this.text,
    this.onPressed,
  });
  
  @override
  Widget build(BuildContext context) {
    return ElevatedButton(
      onPressed: onPressed,
      style: ElevatedButton.styleFrom(
        minimumSize: Size(context.width64, context.height48),
        padding: context.horizontalPaddingMedium + context.verticalPaddingLow,
        shape: RoundedRectangleBorder(
          borderRadius: context.borderRadiusNormal,
        ),
      ),
      child: Text(text),
    );
  }
}
```

### üîç Code Review Checklist

#### Sizer Extensions Usage
- [ ] Using dynamic sizing for responsive layouts
- [ ] Consistent spacing throughout the component
- [ ] Appropriate border radius values
- [ ] Proper animation durations and curves
- [ ] Mobile-first approach implemented
- [ ] Touch targets meet minimum size requirements (48dp)
- [ ] Extensions used instead of hard-coded values
- [ ] Performance optimized (const where possible)
- [ ] Code is readable and maintainable
- [ ] Consistent patterns across similar components

#### Responsive Design
- [ ] Layout adapts to different screen sizes
- [ ] Text scales appropriately with `textScaleFactorClamped`
- [ ] Touch targets are adequate for mobile
- [ ] Content is accessible on small screens
- [ ] Proper use of dynamic width/height
- [ ] Breakpoints are handled correctly
- [ ] Orientation changes are handled

#### Animation & Interaction
- [ ] Consistent animation durations
- [ ] Appropriate curves used for different effects
- [ ] Animations are smooth and performant
- [ ] Loading states are handled properly
- [ ] User feedback is clear and consistent
- [ ] Animation sequences are well-timed

#### Visual Effects
- [ ] Consistent shadow usage
- [ ] Appropriate opacity values
- [ ] Proper blend modes when needed
- [ ] Consistent border radius
- [ ] Proper use of blur and spread radius

### üìö Common Patterns

#### 1. Card Layout
```dart
Card(
  margin: context.marginNormal,
  child: Padding(
    padding: context.paddingMedium,
    child: Column(
      crossAxisAlignment: context.crossStart,
      children: [
        // Header
        Row(
          mainAxisAlignment: context.spaceBetween,
          children: [
            Text('Title'),
            Icon(Icons.more_vert),
          ],
        ),
        SizedBox(height: context.spacing8),
        // Content
        Text('Description'),
        SizedBox(height: context.spacing16),
        // Actions
        Row(
          mainAxisAlignment: context.end,
          children: [
            ElevatedButton(
              onPressed: () {},
              child: Text('Action'),
            ),
          ],
        ),
      ],
    ),
  ),
)
```

#### 2. List Item
```dart
ListTile(
  contentPadding: context.horizontalPaddingMedium,
  leading: CircleAvatar(
    radius: context.radiusNormal,
    child: Icon(Icons.person),
  ),
  title: Text('Title'),
  subtitle: Text('Subtitle'),
  trailing: Icon(Icons.arrow_forward_ios),
  onTap: () {},
)
```

#### 3. Form Layout
```dart
Column(
  crossAxisAlignment: context.crossStart,
  children: [
    Text('Form Title', style: Theme.of(context).textTheme.headlineSmall),
    SizedBox(height: context.spacing16),
    TextFormField(
      decoration: InputDecoration(
        labelText: 'Field Label',
        border: OutlineInputBorder(
          borderRadius: context.borderRadiusNormal,
        ),
      ),
    ),
    SizedBox(height: context.spacing8),
    ElevatedButton(
      onPressed: () {},
      child: Text('Submit'),
    ),
  ],
)
```

#### 4. Responsive Grid
```dart
GridView.builder(
  padding: context.paddingMedium,
  gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(
    crossAxisCount: context.isTablet ? 3 : 2,
    crossAxisSpacing: context.spacing16,
    mainAxisSpacing: context.spacing16,
    childAspectRatio: 1.0,
  ),
  itemCount: items.length,
  itemBuilder: (context, index) {
    return Container(
      decoration: BoxDecoration(
        color: Colors.blue[100],
        borderRadius: context.borderRadiusNormal,
      ),
      child: Center(
        child: Text('Item $index'),
      ),
    );
  },
)
```

### üéØ Extension Categories Reference

#### Core Extensions
- `SizerExtension` - Basic screen dimensions and scaling
- `BorderRadiusExtension` - Border radius utilities
- `DurationExtension` - Duration helpers
- `AlignmentExtension` - Alignment utilities

#### Layout Extensions
- `SpacingExtension` - Spacing values
- `WidthExtension` - Width utilities
- `HeightExtension` - Height utilities
- `PaddingExtension` - Padding utilities
- `MarginExtension` - Margin utilities

#### Animation Extensions
- `DurationValuesExtension` - Predefined durations
- `CurvesExtension` - Animation curves
- `AnimationStatusExtension` - Animation states

#### UI Extensions
- `IconSizeExtension` - Icon sizing
- `OpacityExtension` - Opacity values
- `AlphaExtension` - Alpha transparency
- `BlurRadiusExtension` - Blur effects
- `SpreadRadiusExtension` - Shadow spread

#### Utility Extensions
- `MediaQueryExtension` - Media query utilities
- `BoxFitExtension` - Image fitting
- `StackFitExtension` - Stack fitting
- `FlexExtension` - Flex values

### üìö Resources

- [Flutter Layout Guide](https://docs.flutter.dev/development/ui/layout)
- [Material Design Spacing](https://material.io/design/layout/spacing-methods.html)
- [iOS Human Interface Guidelines - Layout](https://developer.apple.com/design/human-interface-guidelines/layout)
- [OSMEA Design System](https://github.com/masterfabric-mobile/osmea/tree/dev/docs)

---

**Author:** [@gurkanfikretgunak](https://github.com/gurkanfikretgunak) | **OSMEA Sizer Extensions** - Comprehensive responsive design utilities

