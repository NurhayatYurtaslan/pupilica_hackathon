# OSMEA Text Extensions - Cursor Rules

## üì¶ Package Overview
OSMEA Text Extensions provide comprehensive utility extensions for text styling in Flutter applications. These extensions work seamlessly with `OsmeaComponents.Text` to provide consistent typography, spacing, and styling across the entire application.

## üéØ Development Guidelines

### üìÅ File Structure
```
packages/components/lib/src/
‚îî‚îÄ‚îÄ utils/
    ‚îî‚îÄ‚îÄ text_extensions.dart         # Text utility extensions
```

### üé® Extension Categories

#### 1. **Core Typography Extensions**
- `FontWeightExtension` - Font weight utilities (thin to black)
- `TextSizeX` - Font size utilities (tiny to extra large)
- `FontStyleExtension` - Font style options (normal, italic)
- `FontFamilyExtension` - Font family selection (20+ fonts)

#### 2. **Text Layout Extensions**
- `TextAlignExtension` - Text alignment (left, right, center, justify, start, end)
- `TextOverflowExtension` - Text overflow handling (clip, fade, ellipsis, visible)
- `TextMaxLineExtension` - Line limit controls (1 to unlimited)
- `TextBaselineExtension` - Baseline alignment (alphabetic, ideographic)

#### 3. **Text Styling Extensions**
- `TextDecorationExtension` - Text decorations (none, underline, overline, lineThrough)
- `TextDecorationStyleExtension` - Decoration styles (solid, double, dotted, dashed, wavy)
- `TextCapitalizationExtension` - Text capitalization (words, sentences, characters, none)

#### 4. **Advanced Typography Extensions**
- `FontFeatureExtension` - Font features (smallCaps, oldstyleNums, liningNums, etc.)
- `FontVariationExtension` - Font variations (normal, wide, condensed, slant)
- `LetterSpacingExtension` - Letter spacing (tight to extra loose)
- `WordSpacingExtension` - Word spacing (tight to loose)
- `TextLeadingDistributionExtension` - Line height distribution (proportional, even)

### üîß Usage Rules

#### 1. Primary Usage Pattern with OsmeaComponents.text
```dart
// ‚úÖ Good - Use extensions with OsmeaComponents.text
OsmeaComponents.text(
  'Page Title',
  fontSize: context.fontSizeExtraLarge,
  fontFamily: context.fontRoboto,
  fontWeight: context.semiBold,
  letterSpacing: context.letterSpacingWide,
  textAlign: context.textCenter,
  maxLines: context.maxLineTwo,
  overflow: context.ellipsis,
  color: OsmeaColors.nordicBlue,
)

// ‚úÖ Good - Use extensions for additional styling
OsmeaComponents.text(
  'Styled text with extensions',
  fontSize: context.fontSizeMedium,
  fontFamily: context.fontMontserrat,
  fontWeight: context.medium,
  letterSpacing: context.letterSpacingNormal,
  wordSpacing: context.wordSpacingWide,
  textAlign: context.textJustify,
  decoration: context.underline,
  decorationStyle: context.solid,
  color: OsmeaColors.textPrimary,
)

// ‚ùå Bad - Hard-coded values instead of extensions
OsmeaComponents.text(
  'Styled text',
  fontSize: 16,
  fontFamily: 'Roboto',
  fontWeight: FontWeight.w500,
  letterSpacing: 0.5,
  wordSpacing: 1.0,
  textAlign: TextAlign.center,
  maxLines: 2,
  overflow: TextOverflow.ellipsis,
)
```

#### 2. Font Family Selection
```dart
// ‚úÖ Good - Use font family extensions
OsmeaComponents.text(
  'Primary text',
  fontSize: context.fontSizeLarge,
  fontFamily: context.fontRoboto,
  color: OsmeaColors.textPrimary,
)

OsmeaComponents.text(
  'Code text',
  fontSize: context.fontSizeMedium,
  fontFamily: context.fontFiraCode,
  color: OsmeaColors.textSecondary,
)

OsmeaComponents.text(
  'Display text',
  fontSize: context.fontSizeExtraLarge,
  fontFamily: context.fontPlayfairDisplay,
  color: OsmeaColors.nordicBlue,
)

// ‚ùå Bad - Hard-coded font names
OsmeaComponents.text(
  'Primary text',
  fontSize: context.fontSizeLarge,
  fontFamily: 'Roboto',
)
```

#### 3. Font Weight and Size
```dart
// ‚úÖ Good - Use weight and size extensions
OsmeaComponents.text(
  'Bold heading',
  fontSize: context.fontSizeExtraLarge,
  fontWeight: context.bold,
  color: OsmeaColors.textPrimary,
)

OsmeaComponents.text(
  'Light text',
  fontSize: context.fontSizeMedium,
  fontWeight: context.light,
  color: OsmeaColors.textSecondary,
)

// ‚ùå Bad - Hard-coded weights and sizes
OsmeaComponents.text(
  'Bold heading',
  fontSize: 32,
  fontWeight: FontWeight.w700,
)
```

#### 4. Text Alignment and Layout
```dart
// ‚úÖ Good - Use alignment extensions
OsmeaComponents.text(
  'Centered title',
  fontSize: context.fontSizeExtraLarge,
  textAlign: context.textCenter,
  color: OsmeaColors.textPrimary,
)

OsmeaComponents.text(
  'Left-aligned content',
  fontSize: context.fontSizeMedium,
  textAlign: context.textLeft,
  color: OsmeaColors.textSecondary,
)

OsmeaComponents.text(
  'Justified text',
  fontSize: context.fontSizeLarge,
  textAlign: context.textJustify,
  color: OsmeaColors.textPrimary,
)

// ‚ùå Bad - Hard-coded alignment
OsmeaComponents.text(
  'Centered title',
  fontSize: context.fontSizeExtraLarge,
  textAlign: TextAlign.center,
)
```

#### 5. Spacing and Typography
```dart
// ‚úÖ Good - Use spacing extensions
OsmeaComponents.text(
  'Tight letter spacing',
  fontSize: context.fontSizeLarge,
  letterSpacing: context.letterSpacingTight,
  wordSpacing: context.wordSpacingNormal,
  color: OsmeaColors.textPrimary,
)

OsmeaComponents.text(
  'Wide letter spacing',
  fontSize: context.fontSizeExtraLarge,
  letterSpacing: context.letterSpacingWide,
  wordSpacing: context.wordSpacingWide,
  color: OsmeaColors.nordicBlue,
)

// ‚ùå Bad - Hard-coded spacing values
OsmeaComponents.text(
  'Tight letter spacing',
  fontSize: context.fontSizeLarge,
  letterSpacing: -0.5,
  wordSpacing: 0.0,
)
```

#### 6. Text Decoration
```dart
// ‚úÖ Good - Use decoration extensions
OsmeaComponents.text(
  'Underlined text',
  fontSize: context.fontSizeMedium,
  decoration: context.underline,
  decorationStyle: context.solid,
  color: OsmeaColors.nordicBlue,
)

OsmeaComponents.text(
  'Strikethrough text',
  fontSize: context.fontSizeMedium,
  decoration: context.lineThrough,
  decorationStyle: context.dashed,
  color: OsmeaColors.textSecondary,
)

// ‚ùå Bad - Hard-coded decoration values
OsmeaComponents.text(
  'Underlined text',
  fontSize: context.fontSizeMedium,
  decoration: TextDecoration.underline,
  decorationStyle: TextDecorationStyle.solid,
)
```

#### 7. Text Overflow and Lines
```dart
// ‚úÖ Good - Use overflow and line extensions
OsmeaComponents.text(
  'Single line text',
  fontSize: context.fontSizeMedium,
  maxLines: context.maxLineOne,
  overflow: context.ellipsis,
  color: OsmeaColors.textPrimary,
)

OsmeaComponents.text(
  'Multi-line text',
  fontSize: context.fontSizeLarge,
  maxLines: context.maxLineThree,
  overflow: context.fade,
  color: OsmeaColors.textPrimary,
)

OsmeaComponents.text(
  'Unlimited lines',
  fontSize: context.fontSizeMedium,
  maxLines: context.maxLineUnlimited,
  overflow: context.visible,
  color: OsmeaColors.textSecondary,
)

// ‚ùå Bad - Hard-coded line and overflow values
OsmeaComponents.text(
  'Single line text',
  fontSize: context.fontSizeMedium,
  maxLines: 1,
  overflow: TextOverflow.ellipsis,
)
```

#### 8. Font Features and Variations
```dart
// ‚úÖ Good - Use font feature extensions
OsmeaComponents.text(
  'Small caps text',
  fontSize: context.fontSizeLarge,
  fontFeatures: context.smallCaps,
  color: OsmeaColors.textPrimary,
)

OsmeaComponents.text(
  'Old style numbers',
  fontSize: context.fontSizeMedium,
  fontFeatures: context.oldstyleNums,
  color: OsmeaColors.textSecondary,
)

OsmeaComponents.text(
  'Wide font variation',
  fontSize: context.fontSizeExtraLarge,
  fontVariations: context.fontVariationWide,
  color: OsmeaColors.nordicBlue,
)

// ‚ùå Bad - Hard-coded font features
OsmeaComponents.text(
  'Small caps text',
  fontSize: context.fontSizeLarge,
  fontFeatures: [const FontFeature.enable('smcp')],
)
```

### üé® Advanced Usage Patterns

#### 1. Responsive Typography with Extensions
```dart
class ResponsiveText extends StatelessWidget {
  final String text;
  
  const ResponsiveText({required this.text});
  
  @override
  Widget build(BuildContext context) {
    final screenWidth = MediaQuery.of(context).size.width;
    
    return OsmeaComponents.text(
      text,
      fontSize: screenWidth < 600 
        ? context.fontSizeMedium
        : context.fontSizeLarge,
      fontFamily: context.fontRoboto,
      fontWeight: context.medium,
      letterSpacing: context.letterSpacingNormal,
      wordSpacing: context.wordSpacingNormal,
      textAlign: context.textLeft,
      maxLines: context.maxLineUnlimited,
      color: OsmeaColors.textPrimary,
    );
  }
}
```

#### 2. Themed Text with Extensions
```dart
class ThemedText extends StatelessWidget {
  final String text;
  final double fontSize;
  
  const ThemedText(this.text, {required this.fontSize});
  
  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    
    return OsmeaComponents.text(
      text,
      fontSize: fontSize,
      fontFamily: context.fontRoboto,
      fontWeight: context.normal,
      letterSpacing: context.letterSpacingNormal,
      wordSpacing: context.wordSpacingNormal,
      textAlign: context.textLeft,
      color: theme.textTheme.bodyLarge?.color ?? OsmeaColors.textPrimary,
    );
  }
}
```

#### 3. Interactive Text with Extensions
```dart
OsmeaComponents.text(
  'Click here to learn more',
  fontSize: context.fontSizeMedium,
  fontFamily: context.fontRoboto,
  fontWeight: context.medium,
  letterSpacing: context.letterSpacingNormal,
  decoration: context.underline,
  decorationStyle: context.solid,
  color: OsmeaColors.nordicBlue,
  onTap: () {
    // Handle navigation
  },
)
```

#### 4. Form Text with Extensions
```dart
OsmeaComponents.column(
  crossAxisAlignment: context.crossStart,
  children: [
    OsmeaComponents.text(
      'Email Address',
      fontSize: context.fontSizeMedium,
      fontFamily: context.fontRoboto,
      fontWeight: context.medium,
      letterSpacing: context.letterSpacingNormal,
      color: OsmeaColors.textPrimary,
    ),
    OsmeaComponents.sizedBox(height: context.spacing4),
    OsmeaComponents.textField(
      decoration: OsmeaComponents.inputDecoration(
        hintText: 'Enter your email',
        hintStyle: TextStyle(
          color: OsmeaColors.textSecondary,
          fontFamily: context.fontRoboto,
          letterSpacing: context.letterSpacingNormal,
        ),
      ),
      style: TextStyle(
        fontFamily: context.fontRoboto,
        letterSpacing: context.letterSpacingNormal,
        fontSize: context.fontSizeMedium,
      ),
    ),
    OsmeaComponents.sizedBox(height: context.spacing4),
    OsmeaComponents.text(
      'We will never share your email',
      fontSize: context.fontSizeSmall,
      fontFamily: context.fontRoboto,
      letterSpacing: context.letterSpacingNormal,
      color: OsmeaColors.textSecondary,
    ),
  ],
)
```

### üöÄ Best Practices

#### 1. Consistent Extension Usage
```dart
// ‚úÖ Good - Consistent use of extensions
class ArticleText extends StatelessWidget {
  final String title;
  final String content;
  
  const ArticleText({
    required this.title,
    required this.content,
  });
  
  @override
  Widget build(BuildContext context) {
    return OsmeaComponents.column(
      crossAxisAlignment: context.crossStart,
      children: [
        OsmeaComponents.text(
          title,
          fontSize: context.fontSizeExtraLarge,
          fontFamily: context.fontRoboto,
          fontWeight: context.bold,
          letterSpacing: context.letterSpacingNormal,
          textAlign: context.textLeft,
          color: OsmeaColors.textPrimary,
        ),
        OsmeaComponents.sizedBox(height: context.spacing8),
        OsmeaComponents.text(
          content,
          fontSize: context.fontSizeMedium,
          fontFamily: context.fontRoboto,
          fontWeight: context.normal,
          letterSpacing: context.letterSpacingNormal,
          wordSpacing: context.wordSpacingNormal,
          textAlign: context.textJustify,
          maxLines: context.maxLineUnlimited,
          color: OsmeaColors.textSecondary,
        ),
      ],
    );
  }
}
```

#### 2. Extension Grouping
```dart
// ‚úÖ Good - Group related extensions
OsmeaComponents.text(
  'Styled text',
  textStyle: OsmeaTextStyle.bodyLarge(context),
  // Typography
  fontFamily: context.fontMontserrat,
  fontWeight: context.semiBold,
  fontSize: context.fontSizeLarge,
  // Spacing
  letterSpacing: context.letterSpacingWide,
  wordSpacing: context.wordSpacingWide,
  // Layout
  textAlign: context.textCenter,
  maxLines: context.maxLineTwo,
  overflow: context.ellipsis,
  // Decoration
  decoration: context.underline,
  decorationStyle: context.solid,
)
```

#### 3. Performance Optimization
```dart
// ‚úÖ Good - Use extensions efficiently
class OptimizedText extends StatelessWidget {
  final String text;
  
  const OptimizedText({required this.text});
  
  @override
  Widget build(BuildContext context) {
    return OsmeaComponents.text(
      text,
      textStyle: OsmeaTextStyle.bodyMedium(context),
      fontFamily: context.fontRoboto,
      fontWeight: context.normal,
      letterSpacing: context.letterSpacingNormal,
      textAlign: context.textLeft,
      maxLines: context.maxLineUnlimited,
    );
  }
}
```

### üîç Code Review Checklist

#### Extension Usage
- [ ] Using appropriate extensions instead of hard-coded values
- [ ] Consistent font family selection
- [ ] Proper weight and size usage
- [ ] Appropriate spacing values
- [ ] Correct alignment and layout
- [ ] Proper overflow and line handling
- [ ] Consistent decoration usage

#### Typography Quality
- [ ] Clear visual hierarchy with extensions
- [ ] Consistent font families and weights
- [ ] Appropriate letter and word spacing
- [ ] Proper text alignment
- [ ] Consistent color usage
- [ ] Responsive scaling

#### Code Quality
- [ ] No hard-coded font values
- [ ] Proper use of all extension categories
- [ ] Consistent naming conventions
- [ ] Clean and readable code
- [ ] Proper error handling
- [ ] Documentation completeness

### üìö Extension Reference

#### Font Weight Extensions
```dart
context.thin          // FontWeight.w100
context.extraLight    // FontWeight.w200
context.light         // FontWeight.w300
context.normal        // FontWeight.w400
context.medium        // FontWeight.w500
context.semiBold      // FontWeight.w600
context.bold          // FontWeight.w700
context.extraBold     // FontWeight.w800
context.black         // FontWeight.w900
```

#### Text Size Extensions
```dart
context.fontSizeTiny              // 8
context.fontSizeExtraSmall        // 10
context.fontSizeSmall             // 12
context.fontSizeExtraSmallMedium  // 14
context.fontSizeMedium            // 16
context.fontSizeNormal            // 20
context.fontSizeLarge             // 24
context.fontSizeExtraLarge        // 32
```

#### Font Family Extensions
```dart
context.fontDefault           // ''
context.fontRoboto           // 'Roboto'
context.fontOpenSans          // 'Open Sans'
context.fontLato              // 'Lato'
context.fontMontserrat        // 'Montserrat'
context.fontPoppins           // 'Poppins'
context.fontNunito            // 'Nunito'
context.fontRaleway           // 'Raleway'
context.fontSourceSansPro     // 'Source Sans Pro'
context.fontOswald            // 'Oswald'
context.fontPlayfairDisplay   // 'Playfair Display'
context.fontMerriweather      // 'Merriweather'
context.fontPTSans            // 'PT Sans'
context.fontWorkSans          // 'Work Sans'
context.fontInter             // 'Inter'
context.fontDMSans            // 'DM Sans'
context.fontRubik             // 'Rubik'
context.fontManrope           // 'Manrope'
context.fontFiraCode          // 'Fira Code'
context.fontJetBrainsMono     // 'JetBrains Mono'
context.fontCourierNew        // 'Courier New'
context.fontTimesNewRoman     // 'Times New Roman'
context.fontArial             // 'Arial'
context.fontHelvetica         // 'Helvetica'
context.fontSFProDisplay      // 'SF Pro Display'
context.fontSFProText         // 'SF Pro Text'
```

#### Text Alignment Extensions
```dart
context.textLeft      // TextAlign.left
context.textRight     // TextAlign.right
context.textCenter    // TextAlign.center
context.textJustify   // TextAlign.justify
context.textStart     // TextAlign.start
context.textEnd       // TextAlign.end
```

#### Letter Spacing Extensions
```dart
context.letterSpacingExtraTight  // -1.0
context.letterSpacingTight       // -0.5
context.letterSpacingNormal      // 0.0
context.letterSpacingWide        // 0.5
context.letterSpacingExtraWide   // 1.0
context.letterSpacingLoose       // 1.5
context.letterSpacingExtraLoose  // 2.0
```

#### Word Spacing Extensions
```dart
context.wordSpacingTight       // -1.0
context.wordSpacingNormal      // 0.0
context.wordSpacingWide        // 1.0
context.wordSpacingExtraWide   // 2.0
context.wordSpacingLoose       // 3.0
```

#### Text Overflow Extensions
```dart
context.clip       // TextOverflow.clip
context.fade       // TextOverflow.fade
context.ellipsis   // TextOverflow.ellipsis
context.visible    // TextOverflow.visible
```

#### Text Decoration Extensions
```dart
context.none         // TextDecoration.none
context.underline    // TextDecoration.underline
context.overline     // TextDecoration.overline
context.lineThrough  // TextDecoration.lineThrough
```

#### Text Decoration Style Extensions
```dart
context.solid   // TextDecorationStyle.solid
context.double  // TextDecorationStyle.double
context.dotted  // TextDecorationStyle.dotted
context.dashed  // TextDecorationStyle.dashed
context.wavy    // TextDecorationStyle.wavy
```

#### Max Line Extensions
```dart
context.maxLineOne        // 1
context.maxLineTwo        // 2
context.maxLineThree      // 3
context.maxLineFour       // 4
context.maxLineFive       // 5
context.maxLineSix        // 6
context.maxLineEight      // 8
context.maxLineTen        // 10
context.maxLineTwelve     // 12
context.maxLineFifteen    // 15
context.maxLineTwenty     // 20
context.maxLineUnlimited  // 999
```

#### Font Feature Extensions
```dart
context.smallCaps        // [FontFeature.enable('smcp')]
context.oldstyleNums     // [FontFeature.enable('onum')]
context.liningNums       // [FontFeature.enable('lnum')]
context.tabularNums      // [FontFeature.enable('tnum')]
context.proportionalNums // [FontFeature.enable('pnum')]
context.stylisticSet1    // [FontFeature.enable('ss01')]
context.stylisticSet2    // [FontFeature.enable('ss02')]
context.stylisticSet3    // [FontFeature.enable('ss03')]
```

#### Font Variation Extensions
```dart
context.fontVariationNormal     // []
context.fontVariationWide       // [FontVariation('wdth', 125.0)]
context.fontVariationCondensed  // [FontVariation('wdth', 75.0)]
context.fontVariationSlant      // [FontVariation('slnt', -15.0)]
```

### üìö Resources

- [Flutter Text Widget](https://api.flutter.dev/flutter/widgets/Text-class.html)
- [Flutter TextStyle](https://api.flutter.dev/flutter/painting/TextStyle-class.html)
- [Material Design Typography](https://material.io/design/typography/the-type-system.html)
- [iOS Typography Guidelines](https://developer.apple.com/design/human-interface-guidelines/typography)
- [Web Typography Best Practices](https://web.dev/font-best-practices/)
- [OSMEA Design System](https://github.com/masterfabric-mobile/osmea/tree/dev/docs)

---

**Author:** [@gurkanfikretgunak](https://github.com/gurkanfikretgunak) | **OSMEA Text Extensions** - Comprehensive text extension utilities for consistent typography