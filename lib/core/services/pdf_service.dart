import 'dart:io';
import 'dart:typed_data';
import 'package:path_provider/path_provider.dart';
import 'package:pdf/pdf.dart';
import 'package:pdf/widgets.dart' as pw;
import 'package:share_plus/share_plus.dart';
import 'package:pupilica_hackathon/core/helpers/logger.dart';

class PDFService {
  /// Create PDF from extracted text
  static Future<Uint8List> createPDF({
    required String title,
    required String subject,
    required String extractedText,
    String? description,
    int documentCount = 1,
  }) async {
    try {
      Logger.info('Creating PDF document', category: LogCategory.document);

      final pdf = pw.Document();

      pdf.addPage(
        pw.MultiPage(
          pageFormat: PdfPageFormat.a4,
          margin: const pw.EdgeInsets.all(32),
          build: (pw.Context context) {
            return [
              // Title
              pw.Header(
                level: 0,
                child: pw.Text(
                  title,
                  style: pw.TextStyle(
                    fontSize: 24,
                    fontWeight: pw.FontWeight.bold,
                  ),
                ),
              ),

              pw.SizedBox(height: 16),

              // Subject
              pw.Text(
                'Subject: $subject',
                style: pw.TextStyle(
                  fontSize: 16,
                  fontWeight: pw.FontWeight.bold,
                ),
              ),

              pw.SizedBox(height: 8),

              // Document count info
              if (documentCount > 1) ...[
                pw.Text(
                  'Documents processed: $documentCount',
                  style: pw.TextStyle(
                    fontSize: 14,
                    fontWeight: pw.FontWeight.bold,
                    color: PdfColors.blue,
                  ),
                ),
                pw.SizedBox(height: 8),
              ],

              // Description (if provided)
              if (description != null && description.isNotEmpty) ...[
                pw.Text(
                  'Description: $description',
                  style: const pw.TextStyle(fontSize: 14),
                ),
                pw.SizedBox(height: 16),
              ],

              // Divider
              pw.Divider(),
              pw.SizedBox(height: 16),

              // Extracted Text
              pw.Text(
                'Extracted Text:',
                style: pw.TextStyle(
                  fontSize: 16,
                  fontWeight: pw.FontWeight.bold,
                ),
              ),

              pw.SizedBox(height: 8),

              pw.Text(
                extractedText,
                style: const pw.TextStyle(fontSize: 12, lineSpacing: 1.5),
              ),

              pw.SizedBox(height: 16),

              // Footer with watermark in bottom right
              pw.Align(
                alignment: pw.Alignment.bottomRight,
                child: pw.Text(
                  'Generated by RocketLica',
                  style: pw.TextStyle(fontSize: 8, color: PdfColors.grey400),
                ),
              ),
            ];
          },
        ),
      );

      final pdfBytes = await pdf.save();

      Logger.success(
        'PDF created successfully',
        category: LogCategory.document,
        data: {'size': pdfBytes.length},
      );

      return pdfBytes;
    } catch (e) {
      Logger.error(
        'Failed to create PDF',
        category: LogCategory.document,
        data: {'error': e.toString()},
      );
      rethrow;
    }
  }

  /// Save PDF to device and return file path
  static Future<String> savePDFToDevice({
    required String title,
    required String subject,
    required String extractedText,
    String? description,
  }) async {
    try {
      Logger.info('Saving PDF to device', category: LogCategory.document);

      final pdfBytes = await createPDF(
        title: title,
        subject: subject,
        extractedText: extractedText,
        description: description,
      );

      // Get documents directory
      final directory = await getApplicationDocumentsDirectory();
      final fileName =
          '${title.replaceAll(' ', '_')}_${DateTime.now().millisecondsSinceEpoch}.pdf';
      final filePath = '${directory.path}/$fileName';

      // Write PDF to file
      final file = File(filePath);
      await file.writeAsBytes(pdfBytes);

      Logger.success(
        'PDF saved to device',
        category: LogCategory.document,
        data: {'path': filePath, 'size': pdfBytes.length},
      );

      return filePath;
    } catch (e) {
      Logger.error(
        'Failed to save PDF to device',
        category: LogCategory.document,
        data: {'error': e.toString()},
      );
      rethrow;
    }
  }

  /// Share PDF file
  static Future<void> sharePDF({
    required String title,
    required String subject,
    required String extractedText,
    String? description,
  }) async {
    try {
      Logger.info('Sharing PDF', category: LogCategory.document);

      final filePath = await savePDFToDevice(
        title: title,
        subject: subject,
        extractedText: extractedText,
        description: description,
      );

      await Share.shareXFiles([XFile(filePath)], text: 'PDF Document: $title');

      Logger.success('PDF shared successfully', category: LogCategory.document);
    } catch (e) {
      Logger.error(
        'Failed to share PDF',
        category: LogCategory.document,
        data: {'error': e.toString()},
      );
      rethrow;
    }
  }

  /// Get PDF preview as image (for preview purposes)
  static Future<Uint8List> getPDFPreview({
    required String title,
    required String subject,
    required String extractedText,
    String? description,
  }) async {
    try {
      Logger.info('Generating PDF preview', category: LogCategory.document);

      final pdfBytes = await createPDF(
        title: title,
        subject: subject,
        extractedText: extractedText,
        description: description,
      );

      // For now, return the PDF bytes as preview
      // In a real implementation, you might want to convert PDF to image
      return pdfBytes;
    } catch (e) {
      Logger.error(
        'Failed to generate PDF preview',
        category: LogCategory.document,
        data: {'error': e.toString()},
      );
      rethrow;
    }
  }
}
